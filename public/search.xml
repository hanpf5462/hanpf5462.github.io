<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深入理解linux内核-内存寻址</title>
      <link href="2020/10/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E5%86%85%E6%A0%B8-%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80/"/>
      <url>2020/10/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E5%86%85%E6%A0%B8-%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="内存寻址"><a href="#内存寻址" class="headerlink" title="内存寻址"></a>内存寻址</h1><h2 id="内存地址"><a href="#内存地址" class="headerlink" title="内存地址"></a>内存地址</h2><ul><li>内存地址(<em>memory address</em>)分为三种：<ul><li>逻辑地址(<em>logical address</em>)：<ul><li>每一个逻辑地址，都由一个段(<em>segment</em>)和偏移量(<em>offset或displacement</em>)组成，偏移量指明了从段开始的地方到时机地址之间的距离</li></ul></li><li>线性地址(<em>linear address</em>)(<em>也叫虚拟地址 virtual address</em>)：<ul><li>32位无符号整数，4G虚拟内存，地址范围从 0x00000000 到 0xffffffff</li></ul></li><li>物理地址(<em>physical address</em>)：<ul><li>从微处理器的地址引脚发送到内存总线上的电信号，32位或36位无符号整数表示</li></ul></li><li>三种地址转换图<br><img src="/2020/10/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E5%86%85%E6%A0%B8-%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80/MMU.png" alt="MMU内存控制单元" loading="lazy"></li></ul></li></ul><a id="more"></a><h2 id="硬件中的分段"><a href="#硬件中的分段" class="headerlink" title="硬件中的分段"></a>硬件中的分段</h2><ul><li><p>段选择符和段寄存器</p><ul><li>一个逻辑地址由<code>段标识符</code>和指定段内相对地址的<code>偏移量</code>组成。</li><li>段标识符组成<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">         15          3  2   1   0         -------------------------段选择符 |            | TI | RPL |         -------------------------                      tl  &#x3D; 表指示器                       RPL &#x3D; 请求者特权级<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>段寄存器唯一目的是存放段选择符。分别为 <code>cs</code>,<code>ss</code>,<code>ds</code>,<code>es</code>,<code>fs</code>,<code>gs</code>，程序使用时，先讲值保存，用完后再恢复，以此解决寄存器个数少而地址多的问题。<ul><li><strong>cs</strong>（<em>code register</em>）: 代码段寄存器，指向包含程序指令的段</li><li><strong>ss</strong> （<em>stack register</em>）: 栈段寄存器，指向包含当前程序栈的段</li><li><strong>ds</strong> （<em>data register</em>）: 数据段寄存器，指向包含静态数据或者全局数据段</li><li>其他三个寄存器可以指向任意数据段</li><li><strong>cs</strong> 寄存器还有个重要功能：包含一个两位的字段，用来指明CPU的当前特权级别，<strong>CPL</strong>(Current Privilege Level)，0代表最高级，Linux只用0级和3级，代表<code>内核态</code>和<code>用户态</code>。</li></ul></li></ul></li><li><p>段描述符</p><ul><li><p>每个段由8个字节的段描述符表示，描述了段的特征。段描述符放在全局描述符表（GDT，<em>Global Descriptor Table</em>）或局部描述符表（LDT*Local Descriptor *）中。</p></li><li><p>通常只有GDT，当进程需要附加段时，就有了LDT。GDT地址和大小存放在<code>gdtr</code>寄存器中，当前使用的LDT地址和大小存放在<code>ldtr</code>寄存器中。</p></li><li><p>段描述符字段</p><table><thead><tr><th><strong>字段名称</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Base</td><td>包含段的首字节的线性地址</td></tr><tr><td>G</td><td>粒度标志，为0：段以字节为单位，否则：以G为单位</td></tr><tr><td>Limit</td><td>存放段中最后一个内存单元的偏移量，从而决定段的长度，和G单位对应，1byte-&gt;1MB或4KB-&gt;4GB。</td></tr><tr><td>S</td><td>系统标志，0代表系统段，保存LDT，否则是普通代码段或者数据段。</td></tr><tr><td>Type</td><td>描述段的类型特征和他的存取权限</td></tr><tr><td>DPL</td><td>描述符特权级别（<strong>Descriptor Privilege Level</strong>），与CPL对应，DPL为0只能当CPL为0即内核态时才能访问，DPL为3时任何CPL都可以访问。</td></tr><tr><td>P</td><td><strong>Segment-Present</strong>标志：0表示当前段不在主存中，Linux总把这个标志置为1，因为从来不把整个段放到磁盘</td></tr><tr><td>D或B</td><td>取决于是代码段还是数据段。如果偏移量的地址为32位，基本置为1，偏移量为16位，被清0</td></tr><tr><td>AVL</td><td>可被操作系统使用，被Linux忽略。</td></tr></tbody></table></li></ul></li><li><p>代码段描述符<br>  表示这个段描述符代表一个代码段，它可以放在GDT或LDT中。该描述符置S标志为1</p></li><li><p>数据段描述符<br>  表示这个段描述符代表一个数据段，它可以放在GDT或LDT中，该描述符置S标志为1</p></li><li><p>任务状态段描述符<br>  表示这个段描述符代表一个任务状态段，也就是说这个段用于保存处理器寄存器的内容。它只能出现在GDT中，根据相应的进程是否正CPU上运行，其Type字段的值分别为11或9。这个描述符的S标志置为0</p><ul><li>段描述符格式<br><img src="/2020/10/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E5%86%85%E6%A0%B8-%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80/duan.png" alt="段描述符格式" loading="lazy"></li></ul></li></ul><hr><p>今日读到44页<br>2020-10-27</p><hr><ul><li>快速访问段描述符<ul><li>为加速逻辑地址到线性地址的转换，每当一个段选择符被装入段寄存器，相应的段描述符由内存装入对应的非编程CPU寄存器，这样逻辑地址就可以不访问GDT和LDT，只需要访问CPU寄存器，只有当段寄存器内容改变时，才有必要访问GDT和LDT。</li><li>段选择符和段描述符<br><img src="/2020/10/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E5%86%85%E6%A0%B8-%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80/quick.png" alt="段选择符和段描述符" loading="lazy"></li><li>段选择字段<table><thead><tr><th><strong>字段名</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>index</td><td>指定GDT、LDT段描述符入口</td></tr><tr><td>TI</td><td>TI(<em>Table Indicator</em>)标志：指明段描述符在GDT(TI=0)或在LDT(TI=1)中</td></tr><tr><td>RPL</td><td>请求者特权级别：当段选择符装入<code>cs</code>寄存器时指定</td></tr></tbody></table></li><li>段描述符的相对地址<ul><li>由段选择符的最高13位的值乘8得到。</li><li>例如：GTD在0x00020000，段选择符为2，对应的段描述符地址= 0x00020000 + (2 * 8)，即 0x00020010</li></ul></li><li>GDT的第一项总为0，因此空段选择符逻辑地址为无效，因此引起处理器异常，段描述符最大数目是2^13-1</li></ul></li><li>分段单元<ul><li>逻辑地址转换的步骤：<ul><li>读TI，确定段描述符从GDT或LDT中读取，即从<code>gdtr</code>或<code>ldtr</code>中读取</li><li>将从<code>gdtr</code>或<code>ldtr</code>中读取值与index*8值相加，得到段描述符地址</li><li>逻辑地址偏移量与计算的段描述符的地址相加得到线性地址</li><li>上图：<br><img src="/2020/10/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E5%86%85%E6%A0%B8-%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80/address.png" alt="逻辑地址转换" loading="lazy"></li><li><code>注意</code>：段描述符地址，段寄存器内容不发生变换前，只计算一次，保存在非编程寄存器中，后续直接读取<h2 id="Linux中的分段"><a href="#Linux中的分段" class="headerlink" title="Linux中的分段"></a>Linux中的分段</h2></li></ul></li></ul></li><li>所有段都是从0x00000000开始，那么，逻辑地址的偏移量，就和线性地址一致。</li><li>Linux GDT<ul><li>单CPU只有一个GDT，多CPU，每个CPU对应一个GDT。</li></ul></li><li>Linux LDT<ul><li>大多数用户态Linux程序不适用局部描述符，内核有一个缺省的LDT供大多数进程共享。</li><li>但有些情况还是需要创建局部描述符表，例如wine。<h2 id="硬件中的分页"><a href="#硬件中的分页" class="headerlink" title="硬件中的分页"></a>硬件中的分页</h2></li></ul></li><li>为了效率，线性地址分为固定长度的单位的组，称为页。（<em>page</em>）.页内部连续的线性地址被映射到连续的物理地址中。</li></ul><hr><p>今日读到51页<br>2020-10-27</p><hr><ul><li>把线性地址映射到物理地址的数据结构称为页表（<em>page table</em>），页表存放在主存中，启动分页时内核需要对页表进行适当的初始化。</li><li>cr0寄存器的PG标志当PG=0,线性地址被解析成为物理地址。<h2 id="常规分页"><a href="#常规分页" class="headerlink" title="常规分页"></a>常规分页</h2></li><li>32位线性地址分为：Directory（目录）高10位、Table（页表）中间10位、offset（偏移量）低12位</li><li>线性地址与物理地址之间的转换<br><img src="/2020/10/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E5%86%85%E6%A0%B8-%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80/page.png" alt="线性地址物理地址转换" loading="lazy"><h3 id="常规分页举例"><a href="#常规分页举例" class="headerlink" title="常规分页举例"></a>常规分页举例</h3><img src="/2020/10/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E5%86%85%E6%A0%B8-%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80/pagedemo.png" alt="分页举例" loading="lazy"><h2 id="扩展分页"><a href="#扩展分页" class="headerlink" title="扩展分页"></a>扩展分页</h2></li><li>允许页框大小为4MB而不是4KB</li><li>扩展分页地址：Directory（目录）高10位、offset（剩余22位）</li><li>扩展分页与物理地址转换<br><img src="/2020/10/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E5%86%85%E6%A0%B8-%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80/extendpage.png" alt="扩展分页地址转换" loading="lazy"><h2 id="硬件保护方案"><a href="#硬件保护方案" class="headerlink" title="硬件保护方案"></a>硬件保护方案</h2></li><li>分段单元权限（r w x）</li><li>分页单元权限 （r w）<h2 id="硬件高速缓存"><a href="#硬件高速缓存" class="headerlink" title="硬件高速缓存"></a>硬件高速缓存</h2></li><li>如今微处理器的时钟频率非常高，高达几个GHz，RAM存取时间是时钟的数百倍，这样一次存取CPU就会等待很长。</li><li>高速缓冲的实现，<ul><li>读操作，命中高速缓存，直接从高速缓存读取送到CPU寄存器，不用访问RAM节约时间。</li><li>写操作，分为通写和写回。通写即写RAM也写高速缓存，为提高写效率关闭高速缓存。写回，只写高速缓存，不改变RAM，但最终RAM必须被更新，当CPU执行一条竖线高速缓存表项目或者FLUSH，会写入RAM。</li><li>高速缓存<br><img src="/2020/10/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E5%86%85%E6%A0%B8-%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80/cache.png" alt="扩展分页地址转换" loading="lazy"></li><li>TLB转换后缓冲器，方便同一线性地址快速引用。<h2 id="Linux中的分页"><a href="#Linux中的分页" class="headerlink" title="Linux中的分页"></a>Linux中的分页</h2></li></ul></li><li>2.6.11版本后，采用四级分页模型：<ul><li>四级分页模型<br><img src="/2020/10/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E5%86%85%E6%A0%B8-%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80/level4page.png" alt="四级分页模型" loading="lazy"></li><li>进程切换，Linux把cr3控制寄存器的内容保存在前一个执行进程的描述符中，然后把下一个要执行进程的描述符的值装入cr3寄存器中。</li></ul></li><li>物理内存布局<ul><li>初始化，告知内核可用物理地址范围。</li></ul></li></ul><hr><ul><li><code>题外</code>：目前，硬件了解过于浅显，很多不明白的地方没有写很明了，待有宏观了解后，再做细微学习。</li></ul><hr><ul><li>进程页表<ul><li>0x00000000 -&gt; 0xbfffffff线性地址，用户态内核态都可以寻址。</li><li>0xc0000000 -&gt; 0xffffffff线性地址，只有内核态才能寻址。</li><li>PAGE_OFFSET值就是0xc0000000，这是进程在线性地址中的偏移量，也就是内核空间的开始处。<h2 id="内核页表"><a href="#内核页表" class="headerlink" title="内核页表"></a>内核页表</h2></li></ul></li></ul><hr><h2 id="剩余关于页表内容，未能学的很明白，关于内存寻址就学到这里。"><a href="#剩余关于页表内容，未能学的很明白，关于内存寻址就学到这里。" class="headerlink" title="剩余关于页表内容，未能学的很明白，关于内存寻址就学到这里。"></a>剩余关于页表内容，未能学的很明白，关于内存寻址就学到这里。</h2><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>学习时对一些已知的内容，可以找到相应的对应关系，如用户态和内核态在内存寻址部分有一些讲解，CPL来判断用户态内核态，以及内核态地址访问从0xc0000000开始到0xffffffff。</li><li>才疏学浅，望见谅！</li></ul>]]></content>
      
      
      <categories>
          
          <category> linux内核学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 内核 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建-hexo</title>
      <link href="2020/10/24/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-hexo/"/>
      <url>2020/10/24/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo搭建个人博客"><a href="#hexo搭建个人博客" class="headerlink" title="hexo搭建个人博客"></a>hexo搭建个人博客</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>平时自己记录笔记的习惯不是很好，一般都喜欢将笔记记录在本地，比如office的<code>OneNode</code>，还有一个本地数据库软件<code>MyBase</code>，效果一直不是很理想。</li><li>作为一个的嵌入式后端码农，希望通过此次博客搭建，以后所有的学习文档，都在此分享，一方面督促自己学习，一方面跟大家互相讨论，如上！</li></ul><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>Centos-8系统</li><li>目标使用<code>gitpage</code>搭建自己的博客网站，可以随时随地访问。</li></ul><hr><a id="more"></a><hr><h2 id="部署本地环境"><a href="#部署本地环境" class="headerlink" title="部署本地环境"></a>部署本地环境</h2><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> yum -y <span class="token function">install</span> nodejs<span class="token comment">## 安装好后查看版本号,node 、npm</span>node -vv10.21.0<span class="token function">npm</span> -v<span class="token number">6.14</span>.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h3><ul><li>跟npm一样，不过是国内源，速度快很多</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.nmp.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装hexo框架</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cnpm <span class="token function">install</span> -g hexo-cli<span class="token comment">## 安装完成后</span>hexo -vroot:$ hexo -vhexo-cli: <span class="token number">4.2</span>.0os: Linux <span class="token number">4.18</span>.0-193.el8.x86_64 linux x64http_parser: <span class="token number">2.9</span>.3node: <span class="token number">10.21</span>.0v8: <span class="token number">6.8</span>.275.32-node.56uv: <span class="token number">1.34</span>.2zlib: <span class="token number">1.2</span>.11brotli: <span class="token number">1.0</span>.7ares: <span class="token number">1.15</span>.0modules: <span class="token number">64</span>nghttp2: <span class="token number">1.41</span>.0napi: <span class="token number">6</span>openssl: <span class="token number">1.1</span>.1cicu: <span class="token number">64.2</span>unicode: <span class="token number">12.1</span>cldr: <span class="token number">35.1</span>tz: 2019c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="myblog创建"><a href="#myblog创建" class="headerlink" title="myblog创建"></a>myblog创建</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mkdir</span> myblog<span class="token builtin class-name">cd</span> myblog<span class="token comment"># 初始化基础hexo信息</span>hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写第一篇博客"><a href="#编写第一篇博客" class="headerlink" title="编写第一篇博客"></a>编写第一篇博客</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo n <span class="token string">"my_first_blog"</span><span class="token comment">########## </span>INFO  Validating configINFO  Created: /home/hanpengfei/harddisk/myblog/source/_posts/my-first-blog.md<span class="token comment">## 通过修改.md文档更改博客文章内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置github-本地启动和gitpage启动"><a href="#配置github-本地启动和gitpage启动" class="headerlink" title="配置github,本地启动和gitpage启动"></a>配置github,本地启动和gitpage启动</h2><ul><li>新建<code>repository</code><ul><li>登陆github，新建respository</li><li><img src="/2020/10/24/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-hexo/1.jpg" alt="1" loading="lazy"></li><li><img src="/2020/10/24/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-hexo/2.jpg" alt="2" loading="lazy"></li><li><img src="/2020/10/24/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-hexo/3.jpg" alt="3" loading="lazy"></li></ul></li></ul><h3 id="安装git支持"><a href="#安装git支持" class="headerlink" title="安装git支持"></a>安装git支持</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> myblogcnpm <span class="token function">install</span> --save hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> _config.yml<span class="token comment">##在最后deply添加</span>deploy:   type: <span class="token function">git</span>   repo: https://github.com/hanpf5462/hanpf5462.github.io.git   branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo s<span class="token comment">##开启本地服务 http://xxx.xx.xx.xxx:4000，调试用，调试完成推送到github上即可上即可</span><span class="token comment">#推送到远程</span>hexo d<span class="token comment">#通过github访问</span>https://hanpf5462.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后续解决问题"><a href="#后续解决问题" class="headerlink" title="后续解决问题"></a>后续解决问题</h2><h3 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h3><h4 id="本地图片插入方法"><a href="#本地图片插入方法" class="headerlink" title="本地图片插入方法"></a>本地图片插入方法</h4><ul><li><p><code>_config.yml</code>文件修改</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#该选项要修改位true</span>post_asset_folder:true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>首先需要安装支持解析图片的插件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">## 注意不要使用cnpm install hexo-asset-image --save</span><span class="token comment">## 这个版本内容不对 会导致失败 切记！！！</span>cnpm <span class="token function">install</span> https://github.com/CodeFalling/hexo-asset-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在本地创建相应文件夹存放图片，一般与md文件名一致</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">├── hexo搭建个人博客│   ├── <span class="token number">1</span>.jpg│   ├── <span class="token number">2</span>.jpg│   └── <span class="token number">3</span>.jpg├── hexo搭建个人博客.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>md中书写格式（相对路径）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">!</span><span class="token punctuation">[</span>01<span class="token punctuation">]</span><span class="token punctuation">(</span>hexo搭建博客/1.jpg<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">[</span>02<span class="token punctuation">]</span><span class="token punctuation">(</span>hexo搭建博客/2.jpg<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">[</span>03<span class="token punctuation">]</span><span class="token punctuation">(</span>hexo搭建博客/3.jpg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="网络图片插入"><a href="#网络图片插入" class="headerlink" title="网络图片插入"></a>网络图片插入</h4><ul><li><p>使用<a href="https://sm.ms/">图床</a></p></li><li><p>使用方法，将图片上传图床</p><p><img src="https://i.loli.net/2020/10/24/tMnB8lHLV4vuqS9.png" alt="4" loading="lazy"></p><p><img src="https://i.loli.net/2020/10/24/pRkjEWJb5n3eMyI.png" alt="5" loading="lazy"></p><p><img src="https://i.loli.net/2020/10/24/19IKlxMLSQmGNts.png" alt="6" loading="lazy"></p></li><li><p>md中书写格式</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">!</span><span class="token punctuation">[</span>描述<span class="token punctuation">]</span><span class="token punctuation">(</span>https://xxxxxxxxx<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="代码高亮测试"><a href="#代码高亮测试" class="headerlink" title="代码高亮测试"></a>代码高亮测试</h3><ul><li><p>安装支持</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cnpm <span class="token function">install</span> color-themes-for-google-code-prettify<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bash</p></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token builtin class-name">test</span><span class="token function">ls</span> -al<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/10/24/hello-world/"/>
      <url>2020/10/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
